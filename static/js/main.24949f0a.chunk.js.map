{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","MovieField","TextField","name","value","_ref$label","label","_ref$required","required","_ref$onChange","onChange","_ref$validateCustom","validateCustom","_useState","useState","concat","Math","random","toString","slice","id","_slicedToArray","_useState3","_useState4","touched","setToched","_useState5","_useState6","customValid","setCustomValid","hasError","checkCustom","target","htmlFor","classNames","type","placeholder","event","onBlur","NewMovie","onAdd","_useState2","count","setCount","emptyMovie","newMovie","setNewMovie","isAddDisabled","setIsAddDisabled","useEffect","Object","values","some","el","i","_ref2","_dataset$cy","dataset","cy","split","match","entries","_ref3","_ref4","key","str","replace","charAt","toUpperCase","parts","join","generateLabel","newValue","targetKey","prev","movieKey","movieCopy","_objectSpread","handleChange","disabled","onClick","e","preventDefault","App","moviesFromServer","moviesToRender","setMoviesToRender","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"mSAQaA,EAA6B,SAAHC,GAAA,IAAMC,EAAKD,EAALC,MAAK,OAChDC,eAAA,OAAKC,UAAU,OAAO,UAAQ,aAAYC,SAAA,CACxCC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,gBAAeC,SAC/BC,cAAA,OACEC,IAAKL,EAAMM,OACXC,IAAI,kBAIVN,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,OAAKF,UAAU,aAAYC,SACzBC,cAAA,UAAQF,UAAU,iBAAgBC,SAChCC,cAAA,OACEC,IAAI,wBACJE,IAAI,aAIVH,cAAA,OAAKF,UAAU,gBAAeC,SAC5BC,cAAA,KAAGF,UAAU,aAAYC,SAAEH,EAAMQ,aAIrCP,eAAA,OAAKC,UAAU,UAASC,SAAA,CACrBH,EAAMS,YACPL,cAAA,SACAA,cAAA,KAAGM,KAAMV,EAAMW,QAAQR,SAAC,iBAGxB,EC7BKS,EAA8B,SAAHb,GAAA,IAAMc,EAAMd,EAANc,OAAM,OAClDT,cAAA,OAAKF,UAAU,SAAQC,SACpBU,EAAOC,KAAI,SAAAd,GAAK,OACfI,cAACN,EAAS,CAERE,MAAOA,GADFA,EAAMe,OAEX,KAEA,E,wBCFD,ICZFC,EDYQC,EAA6B,SAAHlB,GAOhC,IANLmB,EAAInB,EAAJmB,KACAC,EAAKpB,EAALoB,MAAKC,EAAArB,EACLsB,aAAK,IAAAD,EAAGF,EAAIE,EAAAE,EAAAvB,EACZwB,gBAAQ,IAAAD,GAAQA,EAAAE,EAAAzB,EAChB0B,gBAAQ,IAAAD,EAAG,WAAO,EAACA,EAAAE,EAAA3B,EACnB4B,sBAAc,IAAAD,EAAG,WAAO,EAACA,EAEzBE,EAAaC,oBAAS,oBAAAC,OAASZ,EAAI,KAAAY,OAX5BC,KAAKC,SAASC,WAAWC,MAAM,GAWkB,IAAjDC,EAAoDC,YAAAR,EAAA,GAAlD,GACTS,EAA6BR,oBAAS,GAAMS,EAAAF,YAAAC,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAASF,EAAA,GACzBG,EAAsCZ,oBAAS,GAAMa,EAAAN,YAAAK,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAE5BG,EAAYN,GAAWhB,IAAaJ,GAAUwB,EAE9CG,EAAc,SAACC,GACnBH,GAAgBjB,EAAeoB,GACjC,EAEA,OACE9C,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,SAAOF,UAAU,QAAQ8C,QAASb,EAAGhC,SAClCkB,IAGHjB,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,SACE+B,GAAIA,EACJ,mBAAAL,OAAkBZ,GAClBhB,UAAW+C,IAAW,QAAS,CAC7B,YAAaJ,IAEfK,KAAK,OACLC,YAAW,SAAArB,OAAWT,GACtBF,MAAOA,EACPM,SAAU,SAAA2B,GACR3B,EAAS2B,EAAML,OAAO5B,OACtB2B,EAAYM,EAAML,QAClBH,GAAe,EACjB,EACAS,OAAQ,SAACD,GACPZ,GAAU,GACVM,EAAYM,EAAML,OACpB,MAIHF,GACCzC,cAAA,KAAGF,UAAU,iBAAgBC,SACrB,GAAA2B,OACCT,EADNF,EACW,gCACA,oBAKtB,GCnEe,SAAVH,KAAU,cAAVA,EAAU,0BAAVA,EAAU,gBAAVA,EAAU,kBAAVA,EAAU,iBAAVA,MAAU,KAWR,IAAMsC,EAA4B,SAAHvD,GAAmB,IAAbwD,EAAKxD,EAALwD,MAC1C3B,EAA0BC,mBAAS,GAAE2B,EAAApB,YAAAR,EAAA,GAA9B6B,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAChBG,EAAa,CACjBnD,MAAO,GACPC,YAAa,GACbH,OAAQ,GACRK,QAAS,GACTI,OAAQ,IAEVsB,EAAgCR,mBAAS8B,GAAWrB,EAAAF,YAAAC,EAAA,GAA7CuB,EAAQtB,EAAA,GAAEuB,EAAWvB,EAAA,GAC5BG,EAA0CZ,oBAAS,GAAKa,EAAAN,YAAAK,EAAA,GAAjDqB,EAAapB,EAAA,GAAEqB,EAAgBrB,EAAA,GAEtCsB,qBAAU,WACRD,GAAiB,WACf,OAAOE,OAAOC,OAAON,GAAUO,MAAK,SAACC,EAAIC,GAAC,OAAY,IAANA,IAAmBD,CAAE,GACvE,GACF,GAAG,CAACR,IAEJ,IAiCMjC,EAAiB,SAAH2C,GAA8C,IAADC,EAAvCC,EAAOF,EAAPE,QAASrD,EAAKmD,EAALnD,MAMjC,OAL4B,QAAboD,EAAGC,EAAQC,UAAE,IAAAF,OAAA,EAAVA,EAAYG,MAAM,KAAK,IAMvC,KAAK1D,EAAWL,QAChB,KAAKK,EAAWV,OAChB,KAAKU,EAAWD,OACd,QAASI,EAAMwD,MAPH,wKAQd,QACE,OAAO,EAEb,EAEA,OACE1E,eAAA,QAAMC,UAAU,WAAUC,SAAA,CACxBC,cAAA,MAAIF,UAAU,QAAOC,SAAC,gBAErB8D,OAAOW,QAAQhB,GAAU9C,KAAI,SAAA+D,GAAmB,IAADC,EAAA1C,YAAAyC,EAAA,GAAhBE,EAAGD,EAAA,GAAE3D,EAAK2D,EAAA,GAClCzD,EAtDU,SAAC2D,GACrB,IAAI3D,EAAQ2D,EAAIC,QAAQ,WAAY,OAIpC,IAFA5D,EAAQA,EAAM6D,OAAO,GAAGC,cAAgB9D,EAAMa,MAAM,IAE1CwC,MAAM,KAAK,GAAI,CACvB,IAAMU,EAAQ/D,EAAMqD,MAAM,KAE1BU,EAAM,GAAKA,EAAM,GAAGD,cACpB9D,EAAQ+D,EAAMC,KAAK,IACrB,CAEA,OAAOhE,CACT,CAyCoBiE,CAAcP,GAE5B,OACE3E,cAACa,EAAS,CAERC,KAAM6D,EACN1D,MAAOA,EACPF,MAAOA,EACPM,SAAU,SAAC8D,GAAQ,OA/CR,SAACC,EAAmBrE,GACvC0C,GAAY,SAAC4B,GACX,IAAMC,EAAWF,EACXG,EAASC,YAAA,GAAQH,GAIvB,OAFAE,EAAUD,GAAYvE,EAEfwE,CACT,GACF,CAsCkCE,CAAad,EAAKQ,EAAS,EACnDhE,SAAUwD,IAAQ/D,EAAWP,YAC7BkB,eAAgBA,GANXoD,EASX,IAEA3E,cAAA,OAAKF,UAAU,mBAAkBC,SAC/BC,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAAA,UACE8C,KAAK,SACL,UAAQ,gBACRhD,UAAU,iBACV4F,SAAUhC,EACViC,QAlDQ,SAACC,GACjBA,EAAEC,iBACF1C,EAAMK,GACNF,GAAS,SAAA+B,GAAI,OAAIA,EAAO,CAAC,IACzB5B,EAAYF,EACd,EA6C6BxD,SACpB,cA3ByBsD,EAkCpC,E,OC9GayC,EAAgB,WAC3B,IAAAtE,EAA4CC,mBAASsE,GAAiB3C,EAAApB,YAAAR,EAAA,GAA/DwE,EAAc5C,EAAA,GAAE6C,EAAiB7C,EAAA,GAMxC,OACEvD,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBC,cAAA,OAAKF,UAAU,eAAcC,SAC3BC,cAACQ,EAAU,CAACC,OAAQuF,MAEtBhG,cAAA,OAAKF,UAAU,UAASC,SACtBC,cAACkD,EAAQ,CAACC,MAVF,SAACvD,GACbqG,GAAkB,SAAAZ,GAAI,SAAA3D,OAAAwE,YAASb,GAAI,CAAEzF,GAAK,GAC5C,QAYF,ECpBAuG,IAASC,OAAOpG,cAAC8F,EAAG,IAAKO,SAASC,eAAe,Q","file":"static/js/main.24949f0a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  validateCustom: (target: HTMLInputElement) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  validateCustom = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setToched] = useState(false);\n  const [customValid, setCustomValid] = useState(false);\n\n  const hasError = (touched && required && !value) || customValid;\n\n  const checkCustom = (target: HTMLInputElement) => {\n    setCustomValid(!validateCustom(target));\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n            checkCustom(event.target);\n            setCustomValid(false);\n          }}\n          onBlur={(event) => {\n            setToched(true);\n            checkCustom(event.target);\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {value\n            ? `${label} has to meet all requirements`\n            : `${label} is required`}\n        </p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nenum MovieField {\n  title = 'title',\n  description = 'description',\n  imgUrl = 'imgUrl',\n  imdbUrl = 'imdbUrl',\n  imdbId = 'imdbId',\n}\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const emptyMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n  const [newMovie, setNewMovie] = useState(emptyMovie);\n  const [isAddDisabled, setIsAddDisabled] = useState(true);\n\n  useEffect(() => {\n    setIsAddDisabled(() => {\n      return Object.values(newMovie).some((el, i) => (i === 1 ? false : !el));\n    });\n  }, [newMovie]);\n\n  const generateLabel = (str: string) => {\n    let label = str.replace(/([A-Z])/g, ' $1');\n\n    label = label.charAt(0).toUpperCase() + label.slice(1);\n\n    if (label.split(' ')[1]) {\n      const parts = label.split(' ');\n\n      parts[1] = parts[1].toUpperCase();\n      label = parts.join(' ');\n    }\n\n    return label;\n  };\n\n  const handleChange = (targetKey: string, value: string) => {\n    setNewMovie((prev) => {\n      const movieKey = targetKey as MovieField;\n      const movieCopy = { ...prev };\n\n      movieCopy[movieKey] = value;\n\n      return movieCopy;\n    });\n  };\n\n  const handleAdd = (e: React.MouseEvent) => {\n    e.preventDefault();\n    onAdd(newMovie);\n    setCount(prev => prev + 1);\n    setNewMovie(emptyMovie);\n  };\n\n  const validateCustom = ({ dataset, value }: HTMLInputElement) => {\n    const targetKey = dataset.cy?.split('-')[1];\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    // write custom requirements\n    switch (targetKey) {\n      case MovieField.imdbUrl:\n      case MovieField.imgUrl:\n      case MovieField.imdbId:\n        return !!value.match(pattern);\n      default:\n        return true;\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      {Object.entries(newMovie).map(([key, value]) => {\n        const label = generateLabel(key);\n\n        return (\n          <TextField\n            key={key}\n            name={key}\n            label={label}\n            value={value}\n            onChange={(newValue) => handleChange(key, newValue)}\n            required={key !== MovieField.description}\n            validateCustom={validateCustom}\n          />\n        );\n      })}\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAddDisabled}\n            onClick={handleAdd}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [moviesToRender, setMoviesToRender] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie) => {\n    setMoviesToRender(prev => ([...prev, movie]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesToRender} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}